import React, { useState, useEffect } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from 'firebase/auth';
import { getFirestore, collection, addDoc, query, onSnapshot, orderBy, deleteDoc, doc, Timestamp } from 'firebase/firestore';

// Define the main App component
const App = () => {
    // State variables for Firebase and user data
    const [db, setDb] = useState(null);
    const [auth, setAuth] = useState(null);
    const [userId, setUserId] = useState(null);
    const [isAuthReady, setIsAuthReady] = useState(false); // To track if auth state is determined

    // State variables for application data
    const [messages, setMessages] = useState([]);
    const [keywords, setKeywords] = useState([]);
    const [newMessage, setNewMessage] = useState('');
    const [newKeyword, setNewKeyword] = useState('');
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [infoMessage, setInfoMessage] = useState('');

    // Initialize Firebase and set up authentication listener
    useEffect(() => {
        try {
            // Retrieve Firebase configuration and app ID from global variables
            const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
            const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id'; // Default for local testing

            // Initialize Firebase app
            const app = initializeApp(firebaseConfig);
            const firestoreDb = getFirestore(app);
            const firebaseAuth = getAuth(app);

            setDb(firestoreDb);
            setAuth(firebaseAuth);

            // Set up authentication state observer
            const unsubscribeAuth = onAuthStateChanged(firebaseAuth, async (user) => {
                if (user) {
                    // User is signed in
                    setUserId(user.uid);
                    setIsAuthReady(true);
                    console.log('User signed in:', user.uid);
                } else {
                    // User is signed out. Attempt anonymous or custom token sign-in.
                    try {
                        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;
                        if (initialAuthToken) {
                            // Sign in with custom token if available
                            await signInWithCustomToken(firebaseAuth, initialAuthToken);
                            console.log('Signed in with custom token.');
                        } else {
                            // Sign in anonymously if no custom token
                            await signInAnonymously(firebaseAuth);
                            console.log('Signed in anonymously.');
                        }
                    } catch (signInError) {
                        console.error("Error signing in:", signInError);
                        setError("Failed to authenticate. Please try refreshing.");
                        setIsAuthReady(true); // Still set ready even if sign-in fails
                    }
                }
                // Ensure loading is false after auth check
                if (loading) setLoading(false);
            });

            // Cleanup function for auth listener
            return () => unsubscribeAuth();

        } catch (err) {
            console.error("Firebase initialization error:", err);
            setError("Failed to initialize the application. Check console for details.");
            setLoading(false);
        }
    }, []); // Empty dependency array means this runs once on component mount

    // Fetch messages and keywords from Firestore once authenticated
    useEffect(() => {
        if (!db || !auth || !userId || !isAuthReady) {
            console.log('Waiting for DB, Auth, UserId, or AuthReady...');
            return;
        }

        // --- Fetch Messages ---
        const messagesCollectionRef = collection(db, `artifacts/${__app_id}/users/${userId}/messages`);
        // Note: orderBy is commented out to avoid potential index issues as per instructions.
        // const qMessages = query(messagesCollectionRef, orderBy('timestamp', 'desc'));
        const qMessages = query(messagesCollectionRef); // Fetching without order for now

        const unsubscribeMessages = onSnapshot(qMessages, (snapshot) => {
            const fetchedMessages = snapshot.docs.map(doc => ({
                id: doc.id,
                ...doc.data(),
                // Convert Firestore Timestamp to Date object for easier handling
                timestamp: doc.data().timestamp instanceof Timestamp ? doc.data().timestamp.toDate() : new Date(),
            }));
            setMessages(fetchedMessages);
            if (loading) setLoading(false);
        }, (err) => {
            console.error("Error fetching messages:", err);
            setError("Failed to load messages.");
            setLoading(false);
        });

        // --- Fetch Keywords ---
        const keywordsCollectionRef = collection(db, `artifacts/${__app_id}/users/${userId}/keywords`);
        const qKeywords = query(keywordsCollectionRef);

        const unsubscribeKeywords = onSnapshot(qKeywords, (snapshot) => {
            const fetchedKeywords = snapshot.docs.map(doc => ({
                id: doc.id,
                ...doc.data()
            }));
            setKeywords(fetchedKeywords);
            if (loading) setLoading(false);
        }, (err) => {
            console.error("Error fetching keywords:", err);
            setError("Failed to load keywords.");
            setLoading(false);
        });

        // Cleanup function for Firestore listeners
        return () => {
            unsubscribeMessages();
            unsubscribeKeywords();
        };
    }, [db, auth, userId, isAuthReady]); // Re-run when db, auth, userId, or isAuthReady changes

    // Function to add a new message to Firestore
    const handleAddMessage = async () => {
        if (!newMessage.trim() || !db || !userId) {
            setInfoMessage("Message cannot be empty.");
            return;
        }
        setInfoMessage('');
        try {
            await addDoc(collection(db, `artifacts/${__app_id}/users/${userId}/messages`), {
                text: newMessage.trim(),
                timestamp: Timestamp.now(), // Use Firestore Timestamp
                isOtp: newMessage.toLowerCase().includes('otp') || newMessage.toLowerCase().includes('one time password'), // Simple check for OTP
            });
            setNewMessage('');
            setInfoMessage("Message added successfully!");
        } catch (e) {
            console.error("Error adding message: ", e);
            setError("Failed to add message.");
        }
    };

    // Function to add a new custom keyword to Firestore
    const handleAddKeyword = async () => {
        if (!newKeyword.trim() || !db || !userId) {
            setInfoMessage("Keyword cannot be empty.");
            return;
        }
        // Prevent duplicate keywords
        if (keywords.some(k => k.keywordText.toLowerCase() === newKeyword.trim().toLowerCase())) {
            setInfoMessage("Keyword already exists.");
            setNewKeyword('');
            return;
        }
        setInfoMessage('');
        try {
            await addDoc(collection(db, `artifacts/${__app_id}/users/${userId}/keywords`), {
                keywordText: newKeyword.trim(),
            });
            setNewKeyword('');
            setInfoMessage("Keyword added successfully!");
        } catch (e) {
            console.error("Error adding keyword: ", e);
            setError("Failed to add keyword.");
        }
    };

    // Function to delete a message from Firestore
    const handleDeleteMessage = async (messageId) => {
        if (!db || !userId) return;
        try {
            await deleteDoc(doc(db, `artifacts/${__app_id}/users/${userId}/messages`, messageId));
            setInfoMessage("Message deleted!");
        } catch (e) {
            console.error("Error deleting message: ", e);
            setError("Failed to delete message.");
        }
    };

    // Function to delete a keyword from Firestore
    const handleDeleteKeyword = async (keywordId) => {
        if (!db || !userId) return;
        try {
            await deleteDoc(doc(db, `artifacts/${__app_id}/users/${userId}/keywords`, keywordId));
            setInfoMessage("Keyword deleted!");
        } catch (e) {
            console.error("Error deleting keyword: ", e);
            setError("Failed to delete keyword.");
        }
    };

    // Function to screen and delete messages based on rules
    const handleScreenMessages = async () => {
        if (!db || !userId) {
            setInfoMessage("Please wait for the app to initialize.");
            return;
        }
        setInfoMessage('Screening messages...');
        let deletedCount = 0;
        const now = new Date();
        const twentyFourHoursAgo = new Date(now.getTime() - (24 * 60 * 60 * 1000)); // Calculate 24 hours ago

        // Convert keywords to lowercase for case-insensitive matching
        const lowerCaseKeywords = keywords.map(k => k.keywordText.toLowerCase());

        // Process messages to identify candidates for deletion
        const messagesToDelete = messages.filter(message => {
            // Rule 1: Auto-delete OTPs older than 24 hours
            if (message.isOtp && message.timestamp < twentyFourHoursAgo) {
                console.log(`Deleting old OTP message: "${message.text}" (ID: ${message.id})`);
                return true;
            }

            // Rule 2: Delete messages containing custom keywords (case-insensitive)
            for (const keyword of lowerCaseKeywords) {
                if (message.text.toLowerCase().includes(keyword)) {
                    console.log(`Deleting message with keyword "${keyword}": "${message.text}" (ID: ${message.id})`);
                    return true;
                }
            }
            return false;
        });

        // Perform deletions
        if (messagesToDelete.length > 0) {
            for (const message of messagesToDelete) {
                try {
                    await handleDeleteMessage(message.id);
                    deletedCount++;
                } catch (e) {
                    console.error(`Error deleting message ${message.id}:`, e);
                }
            }
            setInfoMessage(`${deletedCount} message(s) deleted based on rules.`);
        } else {
            setInfoMessage("No messages found to delete based on current rules.");
        }
    };

    // Display loading state
    if (loading) {
        return (
            <div className="flex items-center justify-center min-h-screen bg-gray-100 p-4">
                <div className="text-xl font-semibold text-gray-700">Loading application...</div>
            </div>
        );
    }

    // Display error state
    if (error) {
        return (
            <div className="flex items-center justify-center min-h-screen bg-red-100 p-4">
                <div className="text-xl font-semibold text-red-700">Error: {error}</div>
            </div>
        );
    }

    return (
        <div className="min-h-screen bg-gray-100 font-inter p-4 sm:p-6 md:p-8 flex flex-col items-center">
            <div className="w-full max-w-4xl bg-white shadow-lg rounded-xl p-6 sm:p-8 md:p-10">
                <h1 className="text-3xl sm:text-4xl font-bold text-center text-gray-800 mb-6">
                    Android Message Cleaner Simulator
                </h1>
                {userId && (
                    <div className="text-sm text-gray-600 text-center mb-4 break-all">
                        Your User ID: <span className="font-mono bg-gray-100 rounded-md px-2 py-1">{userId}</span>
                    </div>
                )}
                {infoMessage && (
                    <div className="bg-blue-100 border border-blue-400 text-blue-700 px-4 py-3 rounded-md relative mb-4 text-sm text-center" role="alert">
                        {infoMessage}
                    </div>
                )}

                {/* Add New Message Section */}
                <div className="mb-8 p-4 bg-blue-50 rounded-lg shadow-sm">
                    <h2 className="text-xl font-semibold text-blue-800 mb-4">Add New Message</h2>
                    <div className="flex flex-col sm:flex-row gap-3">
                        <input
                            type="text"
                            value={newMessage}
                            onChange={(e) => setNewMessage(e.target.value)}
                            placeholder="Enter a new message (e.g., Your OTP is 1234)"
                            className="flex-grow p-3 border border-blue-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-700"
                        />
                        <button
                            onClick={handleAddMessage}
                            className="bg-blue-600 text-white px-5 py-3 rounded-lg shadow-md hover:bg-blue-700 transition duration-300 ease-in-out font-semibold flex-shrink-0"
                        >
                            Add Message
                        </button>
                    </div>
                </div>

                {/* Custom Keywords Section */}
                <div className="mb-8 p-4 bg-green-50 rounded-lg shadow-sm">
                    <h2 className="text-xl font-semibold text-green-800 mb-4">Manage Custom Keywords</h2>
                    <div className="flex flex-col sm:flex-row gap-3 mb-4">
                        <input
                            type="text"
                            value={newKeyword}
                            onChange={(e) => setNewKeyword(e.target.value)}
                            placeholder="Add a keyword (e.g., Spam, Promo, Ad)"
                            className="flex-grow p-3 border border-green-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent text-gray-700"
                        />
                        <button
                            onClick={handleAddKeyword}
                            className="bg-green-600 text-white px-5 py-3 rounded-lg shadow-md hover:bg-green-700 transition duration-300 ease-in-out font-semibold flex-shrink-0"
                        >
                            Add Keyword
                        </button>
                    </div>
                    {keywords.length > 0 && (
                        <div className="mt-4">
                            <h3 className="text-lg font-medium text-green-700 mb-2">Your Keywords:</h3>
                            <div className="flex flex-wrap gap-2">
                                {keywords.map(keyword => (
                                    <span key={keyword.id} className="inline-flex items-center bg-green-200 text-green-800 text-sm font-medium px-3 py-1 rounded-full">
                                        {keyword.keywordText}
                                        <button
                                            onClick={() => handleDeleteKeyword(keyword.id)}
                                            className="ml-2 text-green-600 hover:text-green-900 focus:outline-none"
                                            aria-label={`Remove keyword ${keyword.keywordText}`}
                                        >
                                            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                                            </svg>
                                        </button>
                                    </span>
                                ))}
                            </div>
                        </div>
                    )}
                </div>

                {/* Screen Messages Button */}
                <div className="text-center mb-8">
                    <button
                        onClick={handleScreenMessages}
                        className="bg-purple-600 text-white px-8 py-4 rounded-lg shadow-lg hover:bg-purple-700 transition duration-300 ease-in-out text-lg font-bold w-full sm:w-auto"
                    >
                        Screen Messages Now
                    </button>
                </div>

                {/* Messages Display Section */}
                <div className="p-4 bg-gray-50 rounded-lg shadow-sm">
                    <h2 className="text-xl font-semibold text-gray-800 mb-4">Your Messages</h2>
                    {messages.length === 0 ? (
                        <p className="text-gray-600">No messages yet. Add some above!</p>
                    ) : (
                        <div className="space-y-4">
                            {messages.sort((a, b) => b.timestamp - a.timestamp).map((message) => (
                                <div key={message.id} className="bg-white p-4 rounded-lg shadow-md border border-gray-200">
                                    <p className="text-gray-900 font-medium mb-1 break-words">{message.text}</p>
                                    <p className="text-sm text-gray-500">
                                        {message.timestamp.toLocaleString()}
                                        {message.isOtp && <span className="ml-2 px-2 py-1 bg-yellow-100 text-yellow-800 text-xs rounded-full">OTP</span>}
                                    </p>
                                    <button
                                        onClick={() => handleDeleteMessage(message.id)}
                                        className="mt-2 text-red-600 hover:text-red-800 text-sm font-semibold"
                                    >
                                        Delete Manually
                                    </button>
                                </div>
                            ))}
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
};

export default App;
